{"version":3,"sources":["components/menu/PrimaryDropdown.tsx","components/tilelayers/index.ts","util/EventEmitter.ts","context/MapContext.ts","util/types.ts","util/useDebounce.ts","components/SettingsPortal.tsx","util/usePersistentState.ts","components/vizlayers/GHIsochroneLayer.tsx","config.ts","util/typescript.ts","components/vizlayers/DynamicVisualization.ts","components/vizlayers/GHMVTLayer.tsx","util/decodePath.ts","util/colors.ts","components/vizlayers/GHRouteLayer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PrimaryDropdown","props","content","text","isHighlighted","useOverflowStatus","isVisible","closeOverflowMenu","useState","isOpen","setIsOpen","testId","onClick","console","log","onKeyDown","event","key","onClose","placement","trigger","triggerProps","PrimaryDropdownButton","isSelected","tfAddition","process","REACT_APP_THUNDERFOREST_API_KEY","THUNDERFOREST_API_KEY","mapilionAddition","REACT_APP_MAPILION_API_KEY","MAPILION_API_KEY","osAPIKey","REACT_APP_OMNISCALE_API_KEY","osmAttr","retinaTiles","window","devicePixelRatio","defaultTileLayers","name","type","url","attribution","maxZoom","subdomains","getMapStyle","tl","version","sources","tiles","map","sub","replace","tileSize","layers","id","source","minzoom","maxzoom","EventEmitter","handlers","dispatch","handler","apply","undefined","arguments","this","push","index","indexOf","splice","createDefaultMapContext","onHover","onActionChange","graphHopperInfo","MapContext","React","createContext","latLonToString","latLon","c","toFixed","join","useDebounce","value","delay","debouncedValue","setDebouncedValue","useEffect","setTimeout","clearTimeout","SettingsPortal","ReactDOM","createPortal","children","domNode","timeout","globalState","state","URLSearchParams","location","search","get","JSON","parse","lz","getStateFromUrl","save","stringified","stringify","compressed","param","history","pushState","length","usePersistedState","defaultValue","urlstate","setState","IsochroneLayer","action","setAction","myKey","distanceLimit","setDistanceLimit","hoverPosition","setHoverPosition","startPosition","setStartPosition","isochroneData","setIsochroneData","routeParameters","useMemo","layer","PathLayer","data","getPath","d","longitude","latitude","prev_longitude","prev_latitude","getColor","r","distance","getWidth","highlightColor","autoHighlight","pickable","setLayers","context","useContext","subscribe","info","e","coordinate","reverse","forEach","h","onStartDragStartPosition","useCallback","onDragStartPosition","lngLat","onStopDrag","a","getSPT","point","vehicle","VehicleProfileId","Bike","elevation","distance_limit","columns","result","error","Fragment","draggable","onDrag","onDragStart","onDragEnd","captureClick","css","position","transform","label","primaryColor","sidebarElement","htmlFor","flex","alignItems","display","Textfield","isReadOnly","Button","onChange","parseInt","currentTarget","assertUnreachable","x","Error","evaluateDynamicVisualization","setting","input","inputValue","function","expandedCategories","Array","isArray","categories","Object","entries","match","eq","category","lt","gt","default","val","denominator","power","Math","pow","defaultVis","lineWidth","motorway","primary","trunk","secondary","color","GHMVTLayer","visualizationSettings","setVisualizationSettings","parameters","details","keys","encoded_values","encodeURIComponent","MVTLayer","minZoom","getLineColor","feature","properties","getFillColor","object","getLineWidth","updateTriggers","random","lineWidthMinPixels","textAreaRef","useRef","width","ref","target","decodePath","encoded","is3D","len","array","lat","lng","ele","b","shift","charCodeAt","DEFAULT_PALETTE","DEFAULT_PALETTE_ATLASKIT","hexStrToRGB","hexColor","hexToRGB","routingAPI","graphhopper","bikeNetwork","GHRouteLayer","alternateRoutes","setAlternateRoutes","endPosition","setEndPosition","startLinkedToGlobal","setStartLinkedToGlobal","endLinkedToGlobal","setEndLinkedToGlobal","json","setJson","setColor","routes","setRoutes","dispatchAction","i","path","alternate","widthUnits","onStartDragEndPosition","editorCode","trim","params","algorithm","getCustomRoute","points","profile","getRoute","paths","routePaths","points_encoded","CP","ColorPicker","Checkbox","marginTop","isChecked","minHeight","current","palette","selectedColor","cols","newColor","INITIAL_VIEW_STATE","zoom","bearing","pitch","ProductHome","ProjectsContent","hasSeparator","title","filter","setMapStyle","App","viewState","setViewState","vizLayers","setVizLayers","mapStyle","Map","deckGLLayers","setDeckGLLayers","onViewStateChange","getInfo","addOverlay","setSidebar","sidebarRef","node","deckLayers","set","from","values","flat","tabRefs","setTabRefs","tabs","setTabs","D","DeckGL","vl","padding","AtlassianNavigation","primaryItems","renderProductHome","height","minWidth","Tabs","Provider","effects","style","controller","ContextProvider","_MapContext","mapboxApiAccessToken","tabRef","GHIsochroneLayer","Boolean","hostname","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c8af14cf.chunk.js","sourcesContent":["import { useOverflowStatus, PrimaryDropdownButton } from \"@atlaskit/atlassian-navigation\";\nimport { ButtonItem } from \"@atlaskit/menu\";\nimport Popup from \"@atlaskit/popup\";\nimport { PopupProps } from \"@atlaskit/popup/types\";\nimport React, { useState } from \"react\";\n\ntype PrimaryDropdownProps = {\n  content: PopupProps[\"content\"];\n  text: string;\n  isHighlighted?: boolean;\n};\n\n/**\n * from atlaskit sample\n */\nexport default function PrimaryDropdown(props: PrimaryDropdownProps) {\n  const { content, text, isHighlighted } = props;\n  const { isVisible, closeOverflowMenu } = useOverflowStatus();\n  const [isOpen, setIsOpen] = useState(false);\n  const onDropdownItemClick = () => {\n    console.log(\n      \"Programmatically closing the menu, even though the click happens inside the popup menu.\"\n    );\n    closeOverflowMenu();\n  };\n\n  if (!isVisible) {\n    return (\n      <ButtonItem testId={text} onClick={onDropdownItemClick}>\n        {text}\n      </ButtonItem>\n    );\n  }\n\n  const onClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const onClose = () => {\n    setIsOpen(false);\n  };\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    if (event.key === \"ArrowDown\") {\n      setIsOpen(true);\n    }\n  };\n\n  return (\n    <Popup\n      content={content}\n      isOpen={isOpen}\n      onClose={onClose}\n      placement=\"bottom-start\"\n      testId={`${text}-popup`}\n      trigger={(triggerProps: any) => (\n        <PrimaryDropdownButton\n          onClick={onClick}\n          onKeyDown={onKeyDown}\n          isHighlighted={isHighlighted}\n          isSelected={isOpen}\n          testId={`${text}-popup-trigger`}\n          {...triggerProps}\n        >\n          {text}\n        </PrimaryDropdownButton>\n      )}\n    />\n  );\n}\n","// TODO: tilezen, openmaptiles?\n\nlet tfAddition = \"\";\nif (process.env.REACT_APP_THUNDERFOREST_API_KEY)\n    tfAddition = \"?apikey=\" + process.env.THUNDERFOREST_API_KEY;\n\nlet mapilionAddition = \"\";\nif (process.env.REACT_APP_MAPILION_API_KEY)\n    mapilionAddition = \"?key=\" + process.env.MAPILION_API_KEY;\n\nlet osAPIKey = process.env.REACT_APP_OMNISCALE_API_KEY || \"mapsgraph-bf48cc0b\";\n\nconst osmAttr =\n    '&copy; <a href=\"http://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a> contributors';\n\n// Automatically enable high-DPI tiles if provider and browser support it.\nconst retinaTiles = window.devicePixelRatio > 1;\n\nvar esriAttrMapLink = '<a href=\"http://www.esri.com/\">Esri</a>';\nvar esriAttrWhoLink =\n    \"i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\";\n\n// TODO: which of these maps are also available as vector?\n\n// TODO: for TF, can we use json specs? e.g. \"https://tile.thunderforest.com/thunderforest.outdoors-v2.json\"\nconst mapstyle = \"mapbox://styles/mapbox/light-v9\";\nexport type TileLayerDescription =\n    | {\n          name: string;\n          type: \"mapstyle\";\n          url: string;\n      }\n    | {\n          name: string;\n          type: \"raster\";\n          url: string;\n          attribution: string;\n          maxZoom?: number;\n          subdomains?: string[];\n      };\n\nexport const defaultTileLayers: TileLayerDescription[] = [\n    {\n        name: \"Mapbox Light\",\n        type: \"mapstyle\",\n        url: \"mapbox://styles/mapbox/light-v9\",\n    },\n    {\n        type: \"raster\",\n        name: \"Esri Aerial\",\n        url:\n            \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\n        attribution: \"&copy; \" + esriAttrMapLink + \", \" + esriAttrWhoLink,\n        maxZoom: 18,\n    },\n    {\n        type: \"raster\",\n        name: \"Lyrk\",\n        url:\n            \"https://tiles.lyrk.org/\" +\n            (retinaTiles ? \"lr\" : \"ls\") +\n            \"/{z}/{x}/{y}?apikey=6e8cfef737a140e2a58c8122aaa26077\",\n        attribution: osmAttr + ', <a href=\"https://geodienste.lyrk.de/\">Lyrk</a>',\n    },\n    {\n        type: \"raster\",\n        name: \"Omniscale\",\n        // layers: \"osm\", // used for what?\n        url:\n            \"https://maps.omniscale.net/v2/\" +\n            osAPIKey +\n            \"/style.default/{z}/{x}/{y}.png\" +\n            (retinaTiles ? \"?hq=true\" : \"\"),\n        attribution: osmAttr + ', &copy; <a href=\"https://maps.omniscale.com/\">Omniscale</a>',\n    },\n    {\n        type: \"raster\",\n        name: \"OpenStreetMap\",\n        subdomains: [\"a\", \"b\", \"c\"],\n        url: `https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png`,\n        attribution: osmAttr,\n    },\n    {\n        type: \"raster\",\n        name: \"TF Transport\",\n        subdomains: [\"a\", \"b\", \"c\"],\n        url: \"https://{s}.tile.thunderforest.com/transport/{z}/{x}/{y}.png\" + tfAddition,\n        attribution:\n            osmAttr +\n            ', <a href=\"https://www.thunderforest.com/maps/transport/\" target=\"_blank\">Thunderforest Transport</a>',\n    },\n    {\n        type: \"raster\",\n        name: \"TF OpenCycleMap\",\n        subdomains: [\"a\", \"b\", \"c\"],\n        url: \"https://{s}.tile.thunderforest.com/cycle/{z}/{x}/{y}.png\" + tfAddition,\n        attribution:\n            osmAttr +\n            ', <a href=\"https://www.thunderforest.com/maps/opencyclemap/\" target=\"_blank\">Thunderforest Cycle</a>',\n    },\n    {\n        type: \"raster\",\n        name: \"TF Outdoors\",\n        subdomains: [\"a\", \"b\", \"c\"],\n        url: \"https://{s}.tile.thunderforest.com/outdoors/{z}/{x}/{y}.png\" + tfAddition,\n        attribution:\n            osmAttr +\n            ', <a href=\"https://www.thunderforest.com/maps/outdoors/\" target=\"_blank\">Thunderforest Outdoors</a>',\n    },\n    {\n        type: \"raster\",\n        name: \"TF Neighbourhood\",\n        subdomains: [\"a\", \"b\", \"c\"],\n        url: \"https://{s}.tile.thunderforest.com/neighbourhood/{z}/{x}/{y}.png\" + tfAddition,\n        attribution:\n            osmAttr +\n            ', <a href=\"https://www.thunderforest.com/maps/neighbourhood/\" target=\"_blank\">Thunderforest Neighbourhood</a>',\n    },\n    {\n        type: \"raster\",\n        name: \"Kurviger Liberty\",\n        url:\n            \"https://{s}-tiles.mapilion.com/raster/styles/kurviger-liberty/{z}/{x}/{y}\" +\n            (retinaTiles ? \"@2x\" : \"\") +\n            \".png\" +\n            mapilionAddition,\n        attribution:\n            osmAttr +\n            ',&copy; <a href=\"https://kurviger.de/\" target=\"_blank\">Kurviger</a> &copy; <a href=\"https://mapilion.com/attribution\" target=\"_blank\">Mapilion</a> <a href=\"http://www.openmaptiles.org/\" target=\"_blank\">&copy; OpenMapTiles</a>',\n        subdomains: [\"a\", \"b\", \"c\", \"d\", \"e\"],\n    },\n];\n\nexport function getMapStyle(tl: TileLayerDescription) {\n    if (tl.type === \"mapstyle\") {\n        return tl.url;\n    }\n\n    const tiles = tl.subdomains ? tl.subdomains.map((sub) => tl.url.replace(\"{s}\", sub)) : [tl.url];\n    return {\n        version: 8,\n        sources: {\n            \"raster-tiles\": {\n                type: \"raster\",\n                tiles,\n                tileSize: 256,\n                attribution: tl.attribution,\n            },\n        },\n        layers: [\n            {\n                id: \"simple-tiles\",\n                type: \"raster\",\n                source: \"raster-tiles\",\n                minzoom: 0,\n                maxzoom: tl.maxZoom || 24,\n            },\n        ],\n    };\n}\n","/**\n * Simple event pub/sub mechanism\n */\nexport default class EventEmitter<T extends Function> {\n    private readonly handlers: Array<T> = [];\n\n    public dispatch = ((() => {\n        const handlers = this.handlers;\n        return function () {\n            for (const handler of handlers) {\n                handler.apply(undefined, arguments);\n            }\n        };\n    })() as any) as T;\n\n    public subscribe(handler: T) {\n        this.handlers.push(handler);\n        return () => {\n            const index = this.handlers.indexOf(handler);\n            if (index > -1) {\n                this.handlers.splice(index, 1);\n            }\n        };\n    }\n}\n","import { DeckProps } from \"@deck.gl/core/lib/deck\";\nimport { GraphHopperInfo } from \"@relive/graphhopper-api-client/build/experimentalAPI\";\nimport React from \"react\";\nimport EventEmitter from \"../util/EventEmitter\";\n\ntype MapContextType = {\n    onClick: EventEmitter<Required<DeckProps>[\"onClick\"]>;\n    onHover: EventEmitter<Required<DeckProps>[\"onHover\"]>;\n    onActionChange: EventEmitter<\n        (action: \"set-start\" | \"set-end\" | undefined, source: string) => void\n    >;\n    graphHopperInfo?: GraphHopperInfo;\n};\n\nexport const createDefaultMapContext: () => MapContextType = () => ({\n    onClick: new EventEmitter(),\n    onHover: new EventEmitter(),\n    onActionChange: new EventEmitter(),\n    graphHopperInfo: undefined,\n});\n\nconst MapContext = React.createContext<MapContextType>(createDefaultMapContext());\n\nexport default MapContext;\n","export type LatLon = {\n    lat: number;\n    lon: number;\n};\n\nexport type LatLonArray = number[];\n\nexport function latLonToString(latLon: LatLonArray | undefined) {\n    return latLon?.map((c) => c.toFixed(6)).join();\n}\n","import { useEffect, useState } from \"react\";\n\n// https://usehooks.com/useDebounce/\nexport function useDebounce<T>(value: T, delay: number) {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(\n        () => {\n            // Update debounced value after delay\n            const handler = setTimeout(() => {\n                setDebouncedValue(value);\n            }, delay);\n\n            // Cancel the timeout if value changes (also on delay change or unmount)\n            // This is how we prevent debounced value from updating if value is changed ...\n            // .. within the delay period. Timeout gets cleared and restarted.\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        [value, delay] // Only re-call effect if value or delay changes\n    );\n\n    return debouncedValue;\n}\n","import ReactDOM from \"react-dom\";\n\n/**\n * This portal contains the per-layer settings on the left-hand side of the screen\n */\nexport const SettingsPortal: React.FunctionComponent<{ domNode: Element }> = (props) => {\n\n    // React does *not* create a new div. It renders the children into `domNode`.\n    // `domNode` is any valid DOM node, regardless of its location in the DOM.\n    return ReactDOM.createPortal(\n        props.children,\n        props.domNode\n    );\n}","// inspired by https://dev.to/selbekk/persisting-your-react-state-in-9-lines-of-code-9go\n\nimport React, { useEffect } from \"react\";\nimport * as lz from \"lz-string\";\n\nfunction getStateFromUrl() {\n    const urlParams = new URLSearchParams(window.location.search);\n    const state = urlParams.get(\"state\");\n    return state ? JSON.parse(lz.decompressFromEncodedURIComponent(state)) : undefined;\n}\n\nconst globalState = getStateFromUrl() || {};\nlet timeout: any;\n\nfunction save() {\n    const stringified = JSON.stringify(globalState);\n    const compressed = lz.compressToEncodedURIComponent(stringified);\n    const param = \"?state=\" + compressed;\n    window.history.pushState({}, \"\", param);\n    //   localStorage.setItem(key, JSON.stringify(state));\n    console.log(compressed.length, stringified.length, compressed.length / stringified.length);\n}\n\n// export function usePersistedState<T>(key: string, defaultValue?: T) {\n//     return React.useState(defaultValue!);\n// }\n\n/**\n * React Hook that saves the state as part of the ?state= value in the URL\n * State-save happens after 1 second\n */\nexport function usePersistedState<T>(key: string, defaultValue?: T) {\n    const [state, setState] = React.useState<T>(() => {\n        const urlstate = globalState;\n        if (urlstate && urlstate[key] !== undefined) {\n            return urlstate[key];\n        }\n        return defaultValue;\n    });\n    useEffect(() => {\n        // const urlstate = getStateFromUrl() || {};\n        // urlstate[key] = state;\n        globalState[key] = state;\n\n        clearTimeout(timeout);\n        timeout = setTimeout(save, 1000);\n    }, [key, state]);\n    return [state, setState] as [T, React.Dispatch<React.SetStateAction<T>>];\n}\n","\n/** @jsx jsx */\nimport Button from '@atlaskit/button';\nimport LocationIcon from '@atlaskit/icon/glyph/location';\nimport Textfield from '@atlaskit/textfield';\nimport { jsx } from '@emotion/core';\nimport { Layer, PathLayer } from 'deck.gl';\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { DragEvent, Marker } from 'react-map-gl';\nimport { GRAPHHOPPER_BASE_URI } from '../../config';\nimport MapContext from '../../context/MapContext';\nimport { LatLonArray, latLonToString } from '../../util/types';\nimport { useDebounce } from '../../util/useDebounce';\nimport { SettingsPortal } from '../SettingsPortal';\nimport { VehicleProfileId } from '@relive/graphhopper-api-client/build/generated/graphhopper-api/model';\nimport { getSPT } from '@relive/graphhopper-api-client/build/experimentalAPI';\nimport { usePersistedState } from '../../util/usePersistentState';\n\ntype Action = \"set-start\";\n\nconst IsochroneLayer: React.FunctionComponent<{ sidebarElement: Element | undefined, setLayers: (myKey: string, layers: Array<Layer<any> | undefined | false>) => void, myKey: string }> = (props) => {\n    const [action, setAction] = useState<Action>();\n    const [distanceLimit, setDistanceLimit] = usePersistedState<number>(props.myKey + \"-distance\", 5000);\n    const [hoverPosition, setHoverPosition] = useState<LatLonArray>();\n    const [startPosition, setStartPosition] = usePersistedState<LatLonArray>(props.myKey + \"-start\");\n\n    const [isochroneData, setIsochroneData] = useState<any[]>([]);\n\n    if (action === \"set-start\" && startPosition !== hoverPosition) {\n        setStartPosition(hoverPosition!);\n    }\n\n    const routeParameters = useDebounce(useMemo(() => {\n        return {\n            startPosition,\n            distanceLimit\n        };\n    }, [startPosition, distanceLimit]), 1000); // TODO: cancel pending requests?\n\n    useEffect(() => {\n        const layer = !!isochroneData.length && new PathLayer({\n            id: \"deck-\" + props.myKey,\n            data: isochroneData,\n            getPath: d => [[d.longitude, d.latitude], [d.prev_longitude, d.prev_latitude]],\n            getColor: d => {\n                const r = d.distance / distanceLimit;// / 60.0;\n                return [255 * (1 - r), 128 * r, 255 * r, 255];\n            },\n            getWidth: 30,\n            highlightColor: [255, 255, 0, 255],\n            autoHighlight: true,\n            pickable: true,\n        });\n        props.setLayers(props.myKey, [layer]);\n    }, [isochroneData]);\n\n    const context = useContext(MapContext);\n    useEffect(() => {\n        const handlers = [\n            context.onClick.subscribe((info, e) => {\n                setAction(undefined);\n            }),\n            context.onHover.subscribe((info, e) => {\n                if (!info.coordinate) {\n                    return;\n                }\n                if (action) {\n                    setHoverPosition([...info.coordinate as number[]].reverse() as LatLonArray);\n                }\n            })\n        ];\n        return () => {\n            handlers.forEach(h => h());\n        }\n    }, [action])\n\n    const onStartDragStartPosition = useCallback((event: DragEvent) => {\n        setAction(\"set-start\");\n    }, []);\n\n    const onDragStartPosition = useCallback((event: DragEvent) => {\n        context.onHover.dispatch({\n            coordinate: event.lngLat\n        } as any /* hacky */, undefined as any /* hacky */)\n    }, []);\n\n    const onStopDrag = useCallback((event: DragEvent) => {\n        setAction(undefined);\n    }, []);\n\n    useEffect(() => {\n        if (!startPosition) {\n            return;\n        }\n        console.log(\"querying isochrone spt\");\n        (async () => {\n            try {\n                const elevation = false;\n                const result = await getSPT({\n                    point: startPosition.join(),\n                    vehicle: VehicleProfileId.Bike,\n                    elevation,\n                    distance_limit: distanceLimit,\n                    columns: [\"longitude\", \"latitude\", \"time\", \"distance\", \"prev_longitude\", \"prev_latitude\"].join(\",\")\n                }, GRAPHHOPPER_BASE_URI);\n                setIsochroneData(result.data);\n            } catch (e) {\n                console.error(e);\n            }\n        })();\n    }, [routeParameters]);\n\n\n    // console.log(\"renderiso\", props.myKey, props.sidebarElement, startPosition);\n    return (\n        <React.Fragment>\n            {startPosition &&\n                <Marker longitude={startPosition[1]} latitude={startPosition[0]}\n                    draggable={true}\n                    onDrag={onDragStartPosition}\n                    onDragStart={onStartDragStartPosition}\n                    onDragEnd={onStopDrag}\n                    captureClick={action == undefined}>\n                    <div css={{\n\n                        position: \"relative\",\n                        transform: \"translate(-50%, -100%)\"\n                    }}>\n                        <LocationIcon label=\"\" primaryColor=\"green\" />\n                    </div>\n                </Marker>\n            }\n\n            {props.sidebarElement && <SettingsPortal domNode={props.sidebarElement}>\n                <div>\n                    <label htmlFor=\"xsmall\">From:</label>\n                    <div\n                        css={{\n                            flex: 0,\n                            alignItems: 'center',\n                            display: 'flex',\n                        }}\n                    >\n                        <Textfield isReadOnly value={latLonToString(startPosition)} />\n                        <Button isSelected={action === \"set-start\"} onClick={() => setAction(\"set-start\")}>\n                            <LocationIcon label=\"\" primaryColor=\"green\" />\n                        </Button>\n                    </div>\n                    <label>Distance limit:</label>\n                    <Textfield type=\"number\" defaultValue={distanceLimit} onChange={(e) => setDistanceLimit(parseInt(e.currentTarget.value) || distanceLimit)} />\n                </div>\n            </SettingsPortal>}\n\n        </React.Fragment >\n    )\n\n}\n\nexport default IsochroneLayer;","export const GRAPHHOPPER_BASE_URI =\n    process.env.REACT_APP_GRAPHHOPPER_BASE_URI ||\n    (process.env.NODE_ENV === \"production\" // manually set in .env file\n        ? \"..\" // on production, assume we're running at <server>/maps, and apis are running at <server>/*\n        : \"..\"); // on dev, requests are proxied via package.json\n","export function assertUnreachable(x: \"error: Did you forget to handle this type?\"): never {\n    throw new Error(\"Didn't expect to get here\");\n}\n","import { assertUnreachable } from \"../../util/typescript\";\n\nexport type DynamicVisualization<A extends number | string, B extends number | string> = {\n    lineWidth?: DynamicVisualizationSetting<A, number>;\n    color?: DynamicVisualizationSetting<B, [number, number, number, number]>;\n};\n\n/**\n * A small DSL for visualizing MVT layers based on a JSON template\n *\n * TODO: document / add examples\n */\nexport function evaluateDynamicVisualization<A extends number | string, B extends any>(\n    setting: DynamicVisualizationSetting<A, B>,\n    input: any\n) {\n    const inputValue = input[setting.source] as A;\n\n    if (!setting.function || setting.function === \"category\") {\n        let expandedCategories: Array<CategoryMatch<A, B>> | undefined;\n        if (!Array.isArray(setting.categories)) {\n            expandedCategories = Object.entries(setting.categories).map(([key, value]) => {\n                const match: CategoryMatch<A, B> = {\n                    match: {\n                        eq: key as any, // TODO: not sure why types break\n                    },\n                    value,\n                };\n                return match;\n            });\n        } else {\n            expandedCategories = setting.categories;\n        }\n\n        for (let category of expandedCategories) {\n            if (\"eq\" in category.match && category.match.eq === inputValue) {\n                return category.value;\n            }\n\n            if (\"lt\" in category.match && inputValue < (category.match as any).lt) {\n                // TODO: remove \"any\"\n                return category.value;\n            }\n\n            if (\"gt\" in category.match && inputValue > (category.match as any).gt) {\n                // TODO: remove \"any\"\n                return category.value;\n            }\n        }\n\n        return setting.default;\n    }\n\n    if (setting.function === \"linear\") {\n        if (typeof inputValue !== \"number\") {\n            throw new Error(\"can't execute linear on non-number\");\n        }\n\n        let val = inputValue / setting.denominator;\n\n        if (setting.power) {\n            val = Math.pow(val, setting.power);\n        }\n\n        if (setting.value) {\n            // A bit hacky, but if passed [255,-1,255,255] we replace the -1\n            return (setting.value as number[]).map((a) => (a === -1 ? val * 255 : a));\n        }\n        return val;\n    }\n    assertUnreachable(setting.function);\n}\n\ntype CategoryMatch<InputType extends string | number, ReturnValueType extends number | number[]> = {\n    match:\n        | { eq: InputType }\n        | (InputType extends number\n              ?\n                    | {\n                          lt: InputType;\n                      }\n                    | { gt: InputType }\n              : never);\n\n    value: ReturnValueType;\n};\n\ntype CategorySelector<\n    InputType extends string | number,\n    ReturnValueType extends number | number[]\n> = {\n    function?: \"category\"; // default\n    categories:\n        | { [key: string]: ReturnValueType }\n        | Array<CategoryMatch<InputType, ReturnValueType>>;\n    default: ReturnValueType;\n};\n\ntype LinearSelector<ReturnValueType extends number | number[]> = {\n    function: \"linear\";\n    value: ReturnValueType extends number[] ? ReturnValueType : never;\n    denominator: number;\n    power?: number;\n};\n\ntype DynamicVisualizationSetting<\n    InputType extends string | number,\n    ReturnValueType extends number | number[]\n> = {\n    source: string;\n} & (\n    | CategorySelector<InputType, ReturnValueType>\n    | (InputType extends number ? LinearSelector<ReturnValueType> : never)\n);\n","\n/** @jsx jsx */\nimport { Button } from '@atlaskit/button/dist/cjs/components/Button';\nimport Textarea from '@atlaskit/textarea';\nimport { jsx } from '@emotion/core';\nimport { Layer, MVTLayer } from 'deck.gl';\nimport React, { useCallback, useContext, useEffect, useRef } from 'react';\nimport { GRAPHHOPPER_BASE_URI } from '../../config';\nimport MapContext from '../../context/MapContext';\nimport { useDebounce } from '../../util/useDebounce';\nimport { usePersistedState } from '../../util/usePersistentState';\nimport { SettingsPortal } from '../SettingsPortal';\nimport { DynamicVisualization, evaluateDynamicVisualization } from './DynamicVisualization';\n\nconst defaultVis: DynamicVisualization<string, number> = {\n    lineWidth: {\n        source: \"road_class\",\n        categories: {\n            motorway: 30,\n            primary: 20,\n            trunk: 20,\n            secondary: 20,\n        },\n        default: 10,\n    },\n    color: {\n        source: \"road_class\",\n        categories: {\n            motorway: [0xdd, 0x50, 0x4b, 0xff],\n            primary: [0xe2, 0xa0, 0x12, 0xff],\n            trunk: [0xe2, 0xa0, 0x12, 0xff],\n            secondary: [0xf7, 0xc9, 0x13, 0xff],\n        },\n        default: [0xaa, 0xa5, 0xa7, 0xff],\n    }\n};\n\nconst GHMVTLayer: React.FunctionComponent<{ sidebarElement: Element | undefined, setLayers: (myKey: string, layers: Array<Layer<any> | undefined | false>) => void, myKey: string }> = (props) => {\n    const [visualizationSettings, setVisualizationSettings] = usePersistedState(props.myKey + \"-vis\", defaultVis);\n\n    const parameters = useDebounce(useCallback(() => {\n        return {};\n    }, [visualizationSettings]), 200); // TODO: cancel pending requests?\n\n    const context = useContext(MapContext);\n\n    useEffect(() => {\n        console.log(\"change layer\");\n        const details = Object.keys(context.graphHopperInfo?.encoded_values || {}).map(key => \"details=\" + encodeURIComponent(key)).join(\"&\");\n        const layer = new MVTLayer<any>({\n            id: \"deck-\" + props.myKey,\n            data: GRAPHHOPPER_BASE_URI + `/mvt/{z}/{x}/{y}.mvt?${details}`,\n            minZoom: 0,\n            maxZoom: 23,\n            getLineColor: (feature: any) => { // [192, 192, 192],\n                if (!visualizationSettings.color) {\n                    return [255, 0, 0, 255];\n                }\n                return evaluateDynamicVisualization(visualizationSettings.color, feature.properties)\n            },\n            getFillColor: [140, 170, 180],\n            highlightColor: [255, 0, 0, 255],\n            autoHighlight: true,\n            pickable: true,\n            onHover: (info: any) => console.log(info?.object?.properties),\n            getLineWidth: (feature: any) => {\n                if (!visualizationSettings.lineWidth) {\n                    return 1;\n                }\n                return evaluateDynamicVisualization(visualizationSettings.lineWidth, feature.properties)\n            },\n            updateTriggers: {\n                // always trigger an update when this effect is called\n                getLineWidth: Math.random(),\n                getLineColor: Math.random()\n            },\n            lineWidthMinPixels: 1\n        } as any);\n        props.setLayers(props.myKey, [layer as any]);\n    }, [parameters]);\n\n    const textAreaRef = useRef<any>();\n\n    // console.log(\"rendermvt\", props.myKey, props.sidebarElement);\n    return (\n        <React.Fragment>\n            {props.sidebarElement && <SettingsPortal domNode={props.sidebarElement}>\n                <div css={{ width: \"300px\" }}>\n\n                    <label>Visualization settings:</label>\n                    {/* <Textfield type=\"number\" defaultValue={distanceLimit} onChange={(e) => setDistanceLimit(parseInt(e.currentTarget.value) || distanceLimit)} /> */}\n                    <Textarea ref={textAreaRef} defaultValue={JSON.stringify(visualizationSettings, undefined, 2)} onChange={(val: any) => {\n                        const text = val.target.value;\n                        try {\n                            setVisualizationSettings(JSON.parse(text));\n                        } catch (e) {\n                            console.log(e);\n                        }\n                    }}></Textarea>\n                </div>\n            </SettingsPortal>}\n        </React.Fragment >\n    )\n}\n\nexport default GHMVTLayer;","/**\n * Decode a polyline. From the original GraphHopper-web package\n */\nexport default function decodePath(encoded: string, is3D: boolean) {\n    // var start = new Date().getTime();\n    var len = encoded.length;\n    var index = 0;\n    var array = [];\n    var lat = 0;\n    var lng = 0;\n    var ele = 0;\n\n    while (index < len) {\n        var b;\n        var shift = 0;\n        var result = 0;\n        do {\n            b = encoded.charCodeAt(index++) - 63;\n            result |= (b & 0x1f) << shift;\n            shift += 5;\n        } while (b >= 0x20);\n        var deltaLat = result & 1 ? ~(result >> 1) : result >> 1;\n        lat += deltaLat;\n\n        shift = 0;\n        result = 0;\n        do {\n            b = encoded.charCodeAt(index++) - 63;\n            result |= (b & 0x1f) << shift;\n            shift += 5;\n        } while (b >= 0x20);\n        var deltaLon = result & 1 ? ~(result >> 1) : result >> 1;\n        lng += deltaLon;\n\n        if (is3D) {\n            // elevation\n            shift = 0;\n            result = 0;\n            do {\n                b = encoded.charCodeAt(index++) - 63;\n                result |= (b & 0x1f) << shift;\n                shift += 5;\n            } while (b >= 0x20);\n            var deltaEle = result & 1 ? ~(result >> 1) : result >> 1;\n            ele += deltaEle;\n            array.push([lng * 1e-5, lat * 1e-5, ele / 100]);\n        } else array.push([lng * 1e-5, lat * 1e-5]);\n    }\n    // var end = new Date().getTime();\n    // console.log(\"decoded \" + len + \" coordinates in \" + ((end - start) / 1000) + \"s\");\n    return array;\n}\n","export const DEFAULT_PALETTE = [\n    \"#e41a1c\",\n    \"#377eb8\",\n    \"#4daf4a\",\n    \"#984ea3\",\n    \"#ff7f00\",\n    \"#ffff33\",\n    \"#a65628\",\n    \"#f781bf\",\n    \"#999999\",\n];\n\nexport const DEFAULT_PALETTE_ATLASKIT = DEFAULT_PALETTE.map((color) => ({\n    label: color,\n    value: color,\n}));\n\nfunction hexToRGB(hexColor: number): [number, number, number] {\n    return [(hexColor >> 16) & 0xff, (hexColor >> 8) & 0xff, hexColor & 0xff];\n}\n\nexport function hexStrToRGB(hexColor: string) {\n    return hexToRGB(parseInt(hexColor.replace(\"#\", \"0x\")));\n}\n\nexport function getCategoryColor(i: number) {\n    const color = DEFAULT_PALETTE[i % DEFAULT_PALETTE.length];\n    return hexStrToRGB(color);\n}\n","\n/** @jsx jsx */\nimport Button from '@atlaskit/button';\nimport { Checkbox } from '@atlaskit/checkbox';\nimport LinkIcon from '@atlaskit/icon/glyph/link';\nimport LocationIcon from '@atlaskit/icon/glyph/location';\nimport Textarea from '@atlaskit/textarea';\nimport Textfield from '@atlaskit/textfield';\nimport { jsx } from '@emotion/core';\nimport * as graphhopper from \"@relive/graphhopper-api-client\";\nimport { RoutingAPIApiGetRouteRequest } from '@relive/graphhopper-api-client';\nimport { getCustomRoute } from '@relive/graphhopper-api-client/build/experimentalAPI';\nimport { VehicleProfileId } from '@relive/graphhopper-api-client/build/generated/graphhopper-api/model';\nimport { Layer, PathLayer } from 'deck.gl';\nimport React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { DragEvent, Marker } from 'react-map-gl';\nimport { GRAPHHOPPER_BASE_URI } from '../../config';\nimport MapContext from '../../context/MapContext';\nimport decodePath from '../../util/decodePath';\nimport { LatLonArray, latLonToString } from '../../util/types';\nimport { useDebounce } from '../../util/useDebounce';\nimport { SettingsPortal } from '../SettingsPortal';\nimport { usePersistedState } from '../../util/usePersistentState';\nimport ColorPicker from '@atlaskit/color-picker';\nimport { DEFAULT_PALETTE, DEFAULT_PALETTE_ATLASKIT, hexStrToRGB } from '../../util/colors';\n\nconst routingAPI = new graphhopper.RoutingAPIApi(undefined, GRAPHHOPPER_BASE_URI);\n\ntype Action = \"set-start\" | \"set-end\";\n\nconst bikeNetwork =\n{\n    \"priority\": {\n        \"bike_network\": {\n            \"other\": 0.1,\n            \"*\": 1\n        }\n    }\n};\n\nconst GHRouteLayer: React.FunctionComponent<{ sidebarElement: Element | undefined, setLayers: (myKey: string, layers: Array<Layer<any> | undefined | false>) => void, myKey: string }> = (props) => {\n    const [alternateRoutes, setAlternateRoutes] = usePersistedState<boolean>(props.myKey + \"-alt\", false);\n    const [action, setAction] = useState<Action>();\n    const [hoverPosition, setHoverPosition] = useState<LatLonArray>();\n    const [startPosition, setStartPosition] = usePersistedState<LatLonArray>(props.myKey + \"-start\");\n    const [endPosition, setEndPosition] = usePersistedState<LatLonArray>(props.myKey + \"-end\");\n\n    const [startLinkedToGlobal, setStartLinkedToGlobal] = useState(false);\n    const [endLinkedToGlobal, setEndLinkedToGlobal] = useState(false);\n\n    const [json, setJson] = usePersistedState(props.myKey + \"-json\", \"\");\n    const [color, setColor] = usePersistedState(props.myKey + \"-color\", DEFAULT_PALETTE[0]);\n\n    const [routes, setRoutes] = useState<LatLonArray[][]>([]);\n\n    const dispatchAction = useCallback((action: Action | undefined) => {\n        context.onActionChange.dispatch(action, props.myKey);\n    }, []);\n\n\n\n    useEffect(() => {\n        if (action === \"set-start\" && startPosition !== hoverPosition) {\n            setStartPosition(hoverPosition!);\n        }\n\n        if (action === \"set-end\" && endPosition !== hoverPosition) {\n            setEndPosition(hoverPosition!);\n        }\n    }, [action, hoverPosition, startPosition, endPosition])\n\n    // TODO: should useMemo or not? document\n    const routeParameters = useDebounce(useMemo(() => {\n        return {\n            startPosition,\n            endPosition\n        };\n    }, [startPosition, endPosition]), 100); // TODO: cancel pending requests?\n\n    useEffect(() => {\n        const layer = !!routes.length && new PathLayer({\n            id: \"deck-\" + props.myKey,\n            data: routes.map((r, i) => ({ path: r, alternate: i > 0 })),\n            getPath: d => d.path as any,\n            getColor: d => [...hexStrToRGB(color), d.alternate ? 80 : 255] as [number, number, number, number],\n            getWidth: d => 5,\n            widthUnits: \"pixels\",\n        });\n        props.setLayers(props.myKey, [layer]);\n    }, [routes, color]);\n\n    const context = useContext(MapContext);\n    useEffect(() => {\n        const handlers = [\n            context.onClick.subscribe((info, e) => {\n                dispatchAction(undefined);\n            }),\n            context.onActionChange.subscribe((action, source) => {\n                console.log(\"action\", action, source, props.myKey);\n                console.log(\"linked\", startLinkedToGlobal);\n                if (source === props.myKey || action === undefined) {\n\n                    setAction(action);\n                    return;\n                }\n                if (action === \"set-start\" && startLinkedToGlobal) {\n                    setAction(action);\n                } else if (action === \"set-end\" && endLinkedToGlobal) {\n                    setAction(action);\n                }\n            }),\n            context.onHover.subscribe((info, e) => {\n                if (!info.coordinate) {\n                    return;\n                }\n                if (action) {\n                    setHoverPosition([...info.coordinate as number[]].reverse() as LatLonArray);\n                }\n            })\n        ];\n        return () => {\n            handlers.forEach(h => h());\n        }\n    }, [action, startLinkedToGlobal, endLinkedToGlobal])\n\n    const onStartDragStartPosition = useCallback((event: DragEvent) => {\n        dispatchAction(\"set-start\");\n    }, []);\n\n    const onDrag = useCallback((event: DragEvent) => {\n        // setHoverPosition(event.lngLat.reverse());\n        context.onHover.dispatch({\n            coordinate: event.lngLat\n        } as any /* hacky */, undefined as any /* hacky */)\n    }, []);\n\n    const onStartDragEndPosition = useCallback((event: DragEvent) => {\n        dispatchAction(\"set-end\");\n    }, []);\n\n    const onStopDrag = useCallback((event: DragEvent) => {\n        dispatchAction(undefined);\n    }, []);\n\n    useEffect(() => {\n        if (!startPosition || !endPosition) {\n            return;\n        }\n        console.log(\"querying route\");\n        (async () => {\n            try {\n                const elevation = false;\n                const editorCode = json.trim();\n\n                const params: RoutingAPIApiGetRouteRequest = {\n                    point: [startPosition, endPosition].map(c => c.join()),\n                    vehicle: VehicleProfileId.Bike,\n                    elevation,\n                    algorithm: alternateRoutes ? \"alternative_route\" : undefined,\n                };\n\n                const routes = editorCode ?\n                    await getCustomRoute({\n                        ...params,\n                        ...JSON.parse(editorCode),\n                        vehicle: undefined,\n                        points: [[...startPosition].reverse(), [...endPosition].reverse()],\n                        point: undefined,\n                        profile: \"bike\"\n                    }, GRAPHHOPPER_BASE_URI)\n                    : await routingAPI.getRoute(params);\n\n                if (routes.data.paths) {\n                    const routePaths = routes.data.paths.map(path => {\n\n                        if (!path.points_encoded) {\n                            throw new Error(\"unencoded points not implemented\");\n                        }\n                        if (typeof path.points !== \"string\") {\n                            throw new Error(\"unexpected path.points not string\");\n                        }\n                        const decoded = decodePath(path.points, elevation);\n                        return decoded;\n                    }\n                    );\n                    setRoutes(routePaths);\n\n                }\n            } catch (e) {\n                console.error(e);\n            }\n        })();\n    }, [routeParameters, alternateRoutes, json]);\n\n    const CP = ColorPicker as any;\n    const textAreaRef = useRef<any>();\n    // console.log(\"renderside\", props.myKey, props.sidebarElement, startPosition);\n    return (\n        <React.Fragment>\n            {startPosition &&\n                <Marker longitude={startPosition[1]} latitude={startPosition[0]}\n                    draggable={true}\n                    onDrag={onDrag}\n                    onDragStart={onStartDragStartPosition}\n                    onDragEnd={onStopDrag}\n                    captureClick={action == undefined}>\n                    <div css={{\n\n                        position: \"relative\",\n                        transform: \"translate(-50%, -100%)\"\n                    }}>\n                        <LocationIcon label=\"\" primaryColor=\"green\" />\n                    </div>\n                </Marker>\n            }\n            {endPosition &&\n                <Marker longitude={endPosition[1]} latitude={endPosition[0]}\n                    draggable={true}\n                    onDrag={onDrag}\n                    onDragStart={onStartDragEndPosition}\n                    onDragEnd={onStopDrag}\n                    captureClick={action == undefined}>\n                    <div css={{\n\n                        position: \"relative\",\n                        transform: \"translate(-50%, -100%)\"\n                    }}>\n                        <LocationIcon label=\"\" primaryColor=\"red\" />\n                    </div>\n                </Marker>\n            }\n            {props.sidebarElement && <SettingsPortal domNode={props.sidebarElement}>\n                <div>\n                    <label htmlFor=\"xsmall\">From:</label>\n                    <div\n                        css={{\n                            flex: 0,\n                            alignItems: 'center',\n                            display: 'flex',\n                        }}\n                    >\n                        <Textfield isReadOnly value={latLonToString(startPosition)} />\n                        <Button isSelected={action === \"set-start\"} onClick={() => dispatchAction(\"set-start\")}>\n                            <LocationIcon label=\"\" primaryColor=\"green\" />\n                        </Button>\n                        <Button isSelected={startLinkedToGlobal} onClick={() => setStartLinkedToGlobal(!startLinkedToGlobal)}>\n                            <LinkIcon label=\"\" />\n                        </Button>\n                    </div>\n                    <label htmlFor=\"xsmall\">To:</label>\n                    <div\n                        css={{\n                            flex: 0,\n                            alignItems: 'center',\n                            display: 'flex',\n                        }}\n                    >\n                        <Textfield isReadOnly value={latLonToString(endPosition)} />\n                        <Button isSelected={action === \"set-end\"} onClick={() => dispatchAction(\"set-end\")}>\n                            <LocationIcon label=\"\" primaryColor=\"red\" />\n                        </Button>\n                        <Button isSelected={endLinkedToGlobal} onClick={() => setEndLinkedToGlobal(!endLinkedToGlobal)}>\n                            <LinkIcon label=\"\" />\n                        </Button>\n                    </div>\n                    <Checkbox css={{ marginTop: \"20px\" }}\n                        isChecked={alternateRoutes}\n                        onChange={() => setAlternateRoutes(!alternateRoutes)}\n                        label=\"Alternate routes\"\n                    />\n                    <label>Flex mode:</label>\n                    <Textarea css={{ minHeight: \"300px !important\" }} ref={textAreaRef} defaultValue={json} onChange={(val) => setJson(val.target.value)}></Textarea>\n\n                    <Button onClick={() => {\n                        textAreaRef.current!.value = JSON.stringify(bikeNetwork, undefined, 2);\n                        setJson(textAreaRef.current!.value);\n                    }}>\n                        Bike network template\n                    </Button>\n                    {/* <Button onClick={downloadGPX}>\n                        Download GPX\n                    </Button> */}\n                    <div>\n                        Color:\n                    <CP\n                            label=\"Change color\"\n                            palette={DEFAULT_PALETTE_ATLASKIT}\n                            selectedColor={color}\n                            cols={6}\n                            onChange={(newColor: string) => setColor(newColor)}\n                        />\n                    </div>\n                </div>\n\n            </SettingsPortal>}\n\n        </React.Fragment >\n    )\n\n}\n\nexport default GHRouteLayer;","\n/** @jsx jsx */\nimport { AtlassianNavigation } from \"@atlaskit/atlassian-navigation\";\nimport { ButtonItem, MenuGroup, Section } from '@atlaskit/menu';\nimport { Content, LeftSidebarWithoutResize, Main, PageLayout } from '@atlaskit/page-layout';\nimport Tabs from '@atlaskit/tabs';\nimport { TabData } from '@atlaskit/tabs/types';\nimport { jsx } from '@emotion/core';\nimport { getInfo } from \"@relive/graphhopper-api-client/build/experimentalAPI\";\nimport DeckGL, { Layer } from 'deck.gl';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { StaticMap, _MapContext } from 'react-map-gl';\nimport './App.css';\nimport PrimaryDropdown from './components/menu/PrimaryDropdown';\nimport { defaultTileLayers, getMapStyle } from './components/tilelayers';\nimport GHIsochroneLayer from './components/vizlayers/GHIsochroneLayer';\nimport GHMVTLayer from './components/vizlayers/GHMVTLayer';\nimport GHRouteLayer from './components/vizlayers/GHRouteLayer';\nimport { VizLayer, VizLayerType } from './components/vizlayers/VizLayer';\nimport { GRAPHHOPPER_BASE_URI } from \"./config\";\nimport MapContext, { createDefaultMapContext } from './context/MapContext';\nimport { assertUnreachable } from './util/typescript';\nimport { usePersistedState } from \"./util/usePersistentState\";\n\nconst INITIAL_VIEW_STATE = {\n  latitude: 51.923390,\n  longitude: 4.467195,\n  zoom: 9,\n  bearing: 0,\n  pitch: 0\n};\n\nconst ProductHome = () => (\n  // <ProductHome icon={AtlassianIcon} logo={AtlassianLogo} />\n  <div></div>\n);\n\nconst ProjectsContent = (props: { setMapStyle: (style: any) => void }) => (\n  <MenuGroup>\n    <Section hasSeparator title=\"Vector\">\n      {\n        defaultTileLayers.filter(a => a.type === \"mapstyle\").map(a => (\n          <ButtonItem key={a.name} onClick={() => props.setMapStyle(getMapStyle(a))}>{a.name}</ButtonItem>\n        ))\n      }\n    </Section>\n    <Section title=\"Raster\">\n      {\n        defaultTileLayers.filter(a => a.type === \"raster\").map(a => (\n          <ButtonItem key={a.name} onClick={() => props.setMapStyle(getMapStyle(a))}>{a.name}</ButtonItem>\n        ))\n      }\n    </Section>\n\n  </MenuGroup>\n);\n\nconst context = createDefaultMapContext();\n\nfunction App() {\n  const [viewState, setViewState] = usePersistedState(\"viewstate\", INITIAL_VIEW_STATE);\n  const [vizLayers, setVizLayers] = usePersistedState<VizLayer[]>(\"viz\", [{\n    type: \"route\",\n    label: \"Route\"\n  }]);\n  const [mapStyle, setMapStyle] = useState(getMapStyle(defaultTileLayers[0]));\n  const layers = useRef(new Map<string, Layer<any>[]>());\n  const [deckGLLayers, setDeckGLLayers] = useState<Layer<any>[]>();\n\n\n  const onViewStateChange = useCallback(({ viewState }: { viewState: any }) => setViewState(viewState), []);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const info = await getInfo(GRAPHHOPPER_BASE_URI);\n        context.graphHopperInfo = info.data;\n        console.log(info.data.encoded_values);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, []);\n  const addOverlay = useCallback((type: VizLayerType) => {\n    setVizLayers([...vizLayers, {\n      type,\n      label: type + \" (\" + (vizLayers.length + 1) + \")\"\n    }])\n  }, [vizLayers]);\n\n  const [sidebar, setSidebar] = useState<Element | null>();\n  const sidebarRef = useCallback((node: Element | null) => {\n    setSidebar(node)\n  }, []);\n\n\n  const setLayers = useCallback((key: string, deckLayers: Array<Layer<any> | undefined | false>) => {\n    layers.current.set(key, deckLayers.filter(d => d) as Layer<any>[]);\n    setDeckGLLayers(Array.from(layers.current.values()).flat());\n  }, []);\n\n  const [tabRefs, setTabRefs] = useState<Array<Element | undefined>>([]);\n  const [tabs, setTabs] = useState<TabData[]>([]);\n\n  const D = DeckGL as any;\n\n  useEffect(() => {\n    const tabs = vizLayers.map((vl: VizLayer, i) => ({\n      label: vl.label,\n      content: <div key={\"tab\" + i} css={{ padding: \"20px 0\" }} ref={(r) => {\n        console.log(\"setref\")\n        tabRefs[i] = r || undefined;\n        setTabRefs([...tabRefs]);\n      }}></div>\n    }));\n    setTabs(tabs);\n  }, [vizLayers]);\n\n  const OverlaysContent = (props: any) => <MenuGroup>\n    <Section title=\"Overlays\">\n      <ButtonItem onClick={() => addOverlay(\"route\")}>Add route overlay</ButtonItem>\n      <ButtonItem onClick={() => addOverlay(\"isochrone\")}>Add isochrone overlay</ButtonItem>\n      <ButtonItem onClick={() => addOverlay(\"mvt\")}>Add MVT overlay</ButtonItem>\n    </Section>\n  </MenuGroup>;\n\n  return (\n    <React.Fragment>\n      <AtlassianNavigation label=\"hello\" primaryItems={\n        [\n          <PrimaryDropdown content={() => <ProjectsContent setMapStyle={setMapStyle} />} text=\"Background layer\" />,\n          <PrimaryDropdown content={OverlaysContent} text=\"Overlays\" />,\n        ]\n      } renderProductHome={ProductHome}></AtlassianNavigation>\n      <PageLayout>\n\n        <Content testId=\"content\" css={{ height: \"100%\" }}>\n          <LeftSidebarWithoutResize\n            testId=\"leftSidebar\"\n            width={350}\n          >\n            <div css={{ minWidth: 50, padding: '10px 10px' }} ref={sidebarRef}>\n              <Tabs tabs={tabs}></Tabs>\n            </div>\n          </LeftSidebarWithoutResize>\n          <Main testId=\"main\" css={{ height: \"100%\" }}>\n            <MapContext.Provider value={context}>\n              <D\n                width={undefined as any}\n                height={undefined as any}\n                effects={[]}\n                style={{ position: \"relative\" }}\n                // initialViewState={INITIAL_VIEW_STATE}\n                controller={true}\n                layers={deckGLLayers}\n                onHover={context.onHover.dispatch}\n                onClick={context.onClick.dispatch}\n                ContextProvider={_MapContext.Provider}\n                viewState={viewState}\n                onViewStateChange={onViewStateChange}\n              >\n                <StaticMap\n                  width={undefined as any}\n                  height={undefined as any}\n                  mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n                  mapStyle={mapStyle}\n                // TODO: fix mapOptions={{ maxZoom: (mapStyle as any).layers ? (mapStyle as any).layers[0].maxZoom : undefined }}\n                >\n\n                </StaticMap>\n                {vizLayers.map((vl, i) => {\n                  const tabRef = tabRefs[i];\n                  switch (vl.type) {\n                    case \"route\":\n                      return <GHRouteLayer key={vl.label} sidebarElement={tabRef} setLayers={setLayers} myKey={vl.label} ></GHRouteLayer>\n                    case \"isochrone\":\n                      return <GHIsochroneLayer key={vl.label} sidebarElement={tabRef} setLayers={setLayers} myKey={vl.label} ></GHIsochroneLayer>\n                    case \"mvt\":\n                      return <GHMVTLayer key={vl.label} sidebarElement={tabRef} setLayers={setLayers} myKey={vl.label} ></GHMVTLayer>\n                    default:\n                      assertUnreachable(vl.type);\n                  }\n                })}\n              </D>\n            </MapContext.Provider>\n          </Main>\n        </Content>\n      </PageLayout>\n    </React.Fragment >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@atlaskit/css-reset';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}